// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"
	geo "geo/internal/service/geo"

	mock "github.com/stretchr/testify/mock"
)

// Geo is an autogenerated mock type for the Geo type
type Geo struct {
	mock.Mock
}

// Geocode provides a mock function with given fields: ctx, lat, lng
func (_m *Geo) Geocode(ctx context.Context, lat string, lng string) ([]*geo.Address, error) {
	ret := _m.Called(ctx, lat, lng)

	if len(ret) == 0 {
		panic("no return value specified for Geocode")
	}

	var r0 []*geo.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*geo.Address, error)); ok {
		return rf(ctx, lat, lng)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*geo.Address); ok {
		r0 = rf(ctx, lat, lng)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*geo.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, lat, lng)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: ctx, query
func (_m *Geo) Search(ctx context.Context, query string) ([]*geo.Address, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []*geo.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*geo.Address, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*geo.Address); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*geo.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGeo creates a new instance of Geo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGeo(t interface {
	mock.TestingT
	Cleanup(func())
}) *Geo {
	mock := &Geo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
